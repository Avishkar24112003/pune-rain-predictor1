# -*- coding: utf-8 -*-
"""GUI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1upPP_iB2k_4dbk1Wzy8FN4TH86OpG-e5
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay, roc_curve, auc, confusion_matrix

# Load trained model
with open("rain_predictor.pkl", "rb") as f:
    model = pickle.load(f)

# Load data for visualizations
data = pd.read_csv("pune_city_data.csv")

# Set up Streamlit page
st.set_page_config(page_title="Rain Prediction Dashboard", layout="wide")
st.title("üåßÔ∏è Pune City Rain Prediction Dashboard")
st.write("""
Welcome to the interactive dashboard for predicting rain in Pune city.
This system uses historical weather data and machine learning models to forecast the possibility of rain.
""")

# Sidebar for navigation
section = st.sidebar.radio(
    "Choose a section:",
    ("Project Info", "Data Visualization", "Model Evaluation", "Predict Rain Today")
)

# 1Ô∏è‚É£ Project Info
if section == "Project Info":
    st.header("üîπ Project Overview")
    st.write("""
    - **Objective**: Predict if it will rain today based on temperature, humidity, and pressure.
    - **Data**: Historical weather data of Pune.
    - **Models Used**: Linear Regression, Logistic Regression, Random Forest.
    - **Technologies**: Python, scikit-learn, Streamlit.
    - **Metrics**: Accuracy, confusion matrix, ROC curve.
    """)

# 2Ô∏è‚É£ Data Visualization
elif section == "Data Visualization":
    st.header("üîπ Data Visualizations")

    # Correlation Heatmap
    st.subheader("Correlation Heatmap")
    fig, ax = plt.subplots(figsize=(8,6))

    # Keep only numeric columns for correlation
    numeric_data = data.select_dtypes(include=[np.number])

    # Check if there are numeric columns before plotting
    if numeric_data.shape[1] > 0:
        sns.heatmap(numeric_data.corr(), annot=True, cmap='coolwarm', ax=ax)
        st.pyplot(fig)
    else:
        st.error("No numeric columns found in the dataset for correlation heatmap.")

    # Pairplot sample (optional static image placeholder)
    st.subheader("Feature Distributions (Pairplot)")
    st.image("https://seaborn.pydata.org/_images/function_pairplot-1.png",
             caption="(You can generate your own pairplot image from your dataset and display it here)")

# 3Ô∏è‚É£ Model Evaluation
elif section == "Model Evaluation":
    st.header("üîπ Model Evaluation")

    # Debug: Display actual columns in your dataset
    st.write("Columns in your dataset:", data.columns.tolist())

    # Adjust columns based on actual dataset
    X = data[['humidity', 'temp', 'pressure']]
    y = data['rain']

    from sklearn.model_selection import train_test_split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Predictions & metrics
    y_pred = model.predict(X_test)

    # Accuracy
    from sklearn.metrics import accuracy_score
    acc = accuracy_score(y_test, y_pred)
    st.write(f"**Model Accuracy on Test Data:** {acc:.2f}")

    # Confusion matrix
    st.subheader("Confusion Matrix")
    cm = confusion_matrix(y_test, y_pred)
    fig_cm, ax_cm = plt.subplots()
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Not Rain', 'Rain'])
    disp.plot(ax=ax_cm, cmap='Blues')
    st.pyplot(fig_cm)

    # ROC curve
    st.subheader("ROC Curve")
    if hasattr(model, "predict_proba"):
        y_prob = model.predict_proba(X_test)[:,1]
        fpr, tpr, _ = roc_curve(y_test, y_prob)
        roc_auc = auc(fpr, tpr)
        fig_roc, ax_roc = plt.subplots()
        ax_roc.plot(fpr, tpr, label=f'ROC Curve (AUC = {roc_auc:.2f})')
        ax_roc.plot([0,1], [0,1], linestyle='--')
        ax_roc.set_xlabel("False Positive Rate")
        ax_roc.set_ylabel("True Positive Rate")
        ax_roc.legend()
        st.pyplot(fig_roc)

# 4Ô∏è‚É£ Predict Rain Today
elif section == "Predict Rain Today":
    st.header("üîπ Predict Rain Today")
    st.write("Enter today's weather readings below:")

    # Inputs
    humidity = st.number_input("Humidity (%)", min_value=0.0, max_value=100.0, value=50.0)
    temperature = st.number_input("Temperature (¬∞C)", min_value=-10.0, max_value=60.0, value=25.0)
    pressure = st.number_input("Pressure (hPa)", min_value=800.0, max_value=1100.0, value=1010.0)

    if st.button("Predict Rain"):
        new_data = np.array([[humidity, temperature, pressure]])
        pred = model.predict(new_data)
        result = "üåßÔ∏è Rain" if pred[0]==1 else "‚òÄÔ∏è Not Rain"
        st.success(f"Prediction: {result}")
